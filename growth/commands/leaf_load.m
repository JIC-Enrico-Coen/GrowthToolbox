function [m,ok] = leaf_load( m, varargin )
%m = leaf_load( m, filename, ... )
%m = leaf_load( filename, ... )
%m = leaf_load( m )
%m = leaf_load()
%   Load a mesh from a file.  If no filename is given, a dialog will be
%   opened to choose one.
%   The expected format depends on the extension of the filename:
%       .MAT    The mesh is contained in the file as a Matlab object called
%               m.
%       .M      The file contains Matlab commands to create or modify a
%               mesh.  These commands will be executed.
%       .OBJ    Contains only nodes and triangles, in OBJ format.  All
%               other properties of the mesh will be set to their default
%               values.
%   If no filename is given, or the filename is empty, a dialog will be
%   opened to choose one.
%   If the filename consists of just an extension (including the initial
%   "."), a dialog will be opened showing only files with that extension.
%
%   All of these formats can be generated by leaf_save.
%   In the case of .MAT and .OBJ files, the existing mesh will be
%   discarded.  A .M file will discard the current mesh only if it contains
%   a command to create a new mesh; otherwise, it will apply its commands
%   to the current mesh.
%
%   If optional arguments are given, the filename must be given (even if
%   only as the empty srtring).
%
%   Options:
%
%   checkvalidity   This specifies whether, after the mesh is loaded, it
%       will be checked for validity. By default it will be. GFtbox always
%       checks meshes for validity when loading them, but it does take a
%       perceptible time, and if you are writing code that loads many
%       meshes, it may be convenient to bypass the check.
%
%   staticdata   This is a boolean, by default true, specifying whether the
%       corresponding static data file, if any, should be loaded.
%
%   Equivalent GUI operation: the "Load..." button.
%
%   Topics: Files, Mesh editing.

    if ischar( m )
        varargin = [ m, varargin ];
        m = [];
    end

    extensions = { 'mat', 'm', 'obj' };

    % Get the filename.
    filename = '';
    args = varargin;
    if ~isempty(args)
        [ok, filename, args] = getTypedArg( mfilename(), 'char', args );
        if ~ok, return; end
    end
    
    % Get the optional arguments.
    [s,ok] = safemakestruct( mfilename(), args );
    if ~ok, return; end
    s = defaultfields( s, 'checkvalidity', true, 'staticdata', true );
    
    askForFile = 0;
    if isempty(filename)
        askForFile = 1;
        filterspec = inputFilterspec( extensions );
    else
        for i=1:length(extensions)
            if strcmpi( varargin{1}, ['.' extensions{i}] )
                askForFile = 1;
                filterspec = inputFilterspec( { extensions{i} } );
                break;
            end
        end
    end

    if askForFile
        [filename,filepath] = uigetfile( filterspec, 'Load a mesh file' );
        if filename==0, return; end
    else
        [filepath,filename,fileext] = fileparts( filename );
        filename = [filename,fileext];
    end
    
    fullname = fullfile( filepath, filename );
    [m,ok] = loadmesh_anyfile( m, fullname, s.staticdata, [], s.checkvalidity );
end
